# Generated by Django 5.2.4 on 2025-07-14 11:42

import colorfield.fields
import django.core.validators
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="Attendance",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("date", models.DateField(help_text="Date of the attendance")),
                (
                    "is_present",
                    models.BooleanField(help_text="True if student was present"),
                ),
                ("comment", models.TextField(blank=True, help_text="Optional note")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "Attendance",
                "verbose_name_plural": "Attendances",
            },
        ),
        migrations.CreateModel(
            name="Parent",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("is_archived", models.BooleanField(default=False)),
                ("archived_at", models.DateTimeField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("full_name", models.CharField(max_length=100)),
                (
                    "phone_number",
                    models.BigIntegerField(help_text="Parent's phone number"),
                ),
                (
                    "telegram_user_id",
                    models.BigIntegerField(
                        blank=True, help_text="For Telegram messages", null=True
                    ),
                ),
                (
                    "gender",
                    models.CharField(
                        choices=[("male", "Male"), ("female", "Female")], max_length=10
                    ),
                ),
                ("comment", models.TextField(blank=True)),
            ],
            options={
                "verbose_name": "Parent",
                "verbose_name_plural": "Parents",
            },
        ),
        migrations.CreateModel(
            name="Room",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("is_archived", models.BooleanField(default=False)),
                ("archived_at", models.DateTimeField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "name",
                    models.CharField(help_text="Room name or number", max_length=50),
                ),
                (
                    "capacity",
                    models.PositiveIntegerField(help_text="Maximum number of students"),
                ),
                (
                    "extra_info",
                    models.TextField(
                        blank=True, help_text="Additional information about the room"
                    ),
                ),
            ],
            options={
                "verbose_name": "Room",
                "verbose_name_plural": "Rooms",
            },
        ),
        migrations.CreateModel(
            name="Student",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("is_archived", models.BooleanField(default=False)),
                ("archived_at", models.DateTimeField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("full_name", models.CharField(db_index=True, max_length=100)),
                (
                    "phone_number",
                    models.BigIntegerField(
                        help_text="Student's phone number", unique=True
                    ),
                ),
                (
                    "telegram_user_id",
                    models.BigIntegerField(
                        blank=True,
                        help_text="For sending messages via Telegram",
                        null=True,
                    ),
                ),
                ("birth_date", models.DateField(blank=True, null=True)),
                (
                    "gender",
                    models.CharField(
                        choices=[("male", "Male"), ("female", "Female")], max_length=10
                    ),
                ),
                (
                    "profile_photo",
                    models.ImageField(
                        blank=True,
                        help_text="Optional profile photo of the student",
                        null=True,
                        upload_to="students/photos/",
                    ),
                ),
                (
                    "comment",
                    models.TextField(blank=True, help_text="Notes about the student"),
                ),
            ],
            options={
                "verbose_name": "Parent",
                "verbose_name_plural": "Parents",
            },
        ),
        migrations.CreateModel(
            name="StudentGroup",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("is_archived", models.BooleanField(default=False)),
                ("archived_at", models.DateTimeField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "joined_at",
                    models.DateField(
                        help_text="Date when the student joined the group"
                    ),
                ),
                (
                    "price",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Student-specific price (copied from group by default)",
                        max_digits=10,
                    ),
                ),
            ],
            options={
                "verbose_name": "Student Group",
                "verbose_name_plural": "Student Groups",
            },
        ),
        migrations.CreateModel(
            name="Branch",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("is_archived", models.BooleanField(default=False)),
                ("archived_at", models.DateTimeField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "name",
                    models.CharField(
                        help_text="Name of the branch", max_length=100, unique=True
                    ),
                ),
                (
                    "address",
                    models.TextField(help_text="Physical address of the branch"),
                ),
                (
                    "extra_info",
                    models.TextField(
                        blank=True, help_text="Optional notes about this branch"
                    ),
                ),
            ],
            options={
                "verbose_name": "Branch",
                "verbose_name_plural": "Branches",
                "indexes": [
                    models.Index(fields=["name"], name="core_branch_name_5a8f35_idx")
                ],
            },
        ),
        migrations.CreateModel(
            name="Group",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("is_archived", models.BooleanField(default=False)),
                ("archived_at", models.DateTimeField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "name",
                    models.CharField(
                        db_index=True,
                        help_text="Group name, e.g., 'Matematika-1' or 'Fizika'",
                        max_length=100,
                    ),
                ),
                ("comment", models.TextField(blank=True)),
                ("start_date", models.DateField(help_text="Start date of the course")),
                ("end_date", models.DateField(help_text="End date of the course")),
                (
                    "price",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Monthly price of the course",
                        max_digits=10,
                    ),
                ),
                (
                    "course_start_time",
                    models.TimeField(
                        help_text="Time when the course begins each session"
                    ),
                ),
                (
                    "course_end_time",
                    models.TimeField(
                        help_text="Time when the course ends each session"
                    ),
                ),
                (
                    "weekdays",
                    models.CharField(
                        help_text="Days of the week as digits 1-7 (1=Mon, 7=Sun). E.g., '135' = Mon/Wed/Fri",
                        max_length=7,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Weekdays must be 1-7 digits, no other characters allowed.",
                                regex="^[1-7]{1,7}$",
                            )
                        ],
                    ),
                ),
                (
                    "color",
                    colorfield.fields.ColorField(
                        default="#FFFFFF",
                        help_text="Background color for the group in UI (hex format, e.g., #34D399)",
                        image_field=None,
                        max_length=7,
                        samples=None,
                    ),
                ),
                (
                    "text_color",
                    colorfield.fields.ColorField(
                        default="#FFFFFF",
                        help_text="Text color for UI display (hex format, e.g., #ffffff)",
                        image_field=None,
                        max_length=7,
                        samples=None,
                    ),
                ),
                (
                    "branch",
                    models.ForeignKey(
                        help_text="Branch where the group is taught",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="core.branch",
                    ),
                ),
            ],
            options={
                "verbose_name": "Group",
                "verbose_name_plural": "Groups",
            },
        ),
    ]
